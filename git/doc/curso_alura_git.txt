#: Title :  Curso Git Alura
#: Author : "Caio Abreu Ferreira"
#: Description : Curso Alura de Git
#: Options : 

#############################################
#
# 02. iniciando os trabalhos
#
#############################################

# inicializar o repositório
$ git init

# mostrar o estado do repositório
$ git status

# adicionar um arquivo no repositório
$ git add indes.html
$ git add .

# adicionar uma mensagem a um commit
$ git commit -m "mensagem referente ao commit"

# visualizar o histórico dos commit
$ git log
$ git log -p ; visualizar as alterações
$ git log --pretty="format:%h %s"

# visualizar/modificar as configurações
$ git config --local user.name "caio ferreira"
$ git config --local user.email "abreuferr@gmail.com"
$ git config --local user.name
$ git config --local user.email

#############################################
#
# 03.compartilhando o trabalho
#
#############################################

# criar repositório git
$ git init --bare

# adicionar um repositório git
# git remote add <local> {caminho}
$ git remote add <local> <C:/Users/ALURA/Documents/git-e-github/servidor>

# visualizar o repositório git
$ git remote -v

# clonar um repositório
# git clone {caminho} <projeto>
$ git clone /c/Users/ALURA/Documents/git-e-github/servidor projeto

# enviar os dados para o repositório
# git push <local> <main>
$ git push <local> <master>

# renomear o repositório
$ git remote rename <origin> <local>

# receber os dados do repositório remote_port
# git pull <local> <main>
$ git pull <local> <master>

#############################################
#
# 04.Trabalhando em equipe
#
#############################################

# visualizar branch
# https://git-school.github.io/visualizing-git

# exibir branch
$ git branch

# criar uma branch
$ git branch <titulo>

# mudar para uma nova branch
$ git checkout <titulo>

# criar e mudar para a nova branch
$ git checkout -b <titulo>

# git add
# git commit

# voltando para a branch master
$ git checkout master

# unir as branch
# O merge junta os trabalhos e gera um merge commit
$ git checkout master
$ git merge <titulo>

# unir as branch
# O rebase aplica os commits de outra branch na branch atual
$ git checkout master
$ git rebase <titulo>

#
# SIMULAÇÃO
#

git branch ; para visualizar as branch existentes

git checkout -b titulo ; foi criado a branch "titulo" e nos movemos para ela
vi git/src/index.html ; modificação no arquivo index.html
git add git/src/index.html ; foi adicionado o arquivo index.html no monitoramento
git commit -m "alteração no titulo" ; foi feito um commit em relação a alteração feita anteriormente

git checkout main ; nos movemos para a branch main
git merge titulo ; trazer as alterações da branch titulo para a branch main

git checkout -b lista ; foi criado a branch "lista" e nos movemos para email
vi git/src/index.html ; modificação no arquivo index.html
git add git/src/index.html ; foi adicionado o arquivo index.html no monitoramento
git commit -m "alteração no titulo" ; foi feito um commit em relação a alteração feita anteriormente

git checkout main ; nos movemos para a branch main
git rebase titulo ; trazer as alterações da branch titulo para a branch main

#############################################
#
# 05.Manipulando as versões
#
#############################################

# reverter alterações feitas no código

$ vi git/src/index.html
$ git status
$ git checkout -- index.html

$ vi git/src/index.html
$ git status
$ git add git/src/index.html
$ git reset HEAD index.html
$ git checkout -- index.html

$ vi git/src/index.html
$ git add index.html
$ git commit -m "alterando o arquivo index.html"
$ git log
$ git revert <HASH_COMMIT>

# Quando precisamos pausar o desenvolvimento de alguma funcionalidade, 
# ou correção, antes de finalizar, talvez não seja interessante realizar 
# um commit, pois o nosso código pode não estar funcionando ainda. Nesse 
# caso é interessante salvar o trabalho para podermos voltar a ele depois.
#
$ vi git/src/index.html
$ git stash
$ git stash list
$ vi git/src/index.html
$ git status
$ git add git/src/index.html
$ git commit -m "alterando o arquivo index.html"
$ vi git/src/index.html
$ git stash pop
$ git add git/src/index.html
$ git commit "alterando o arquivo index.html"

# Voltar para um determinado ponto do projeto.
#
# A descrição do comando git checkout --help, em uma tradução livre é: 
# "Atualizar os arquivos na working tree para ficarem na versão especificada. 
# [...]". Basicamente, podemos deixar o nosso código no estado do último 
# commit de uma branch, de um commit específico, ou mesmo tags.
#
$ git log
$ git checkout <HASH_COMMIT>
$ git checkout -b novo-branch

#############################################
#
# 06.Gerando entregas
#
#############################################

# visualizar todas as alterações em um único comando.
#
# O sinal de subtração (-) antes da linha indica que ela não está mais 
# presente no arquivo. Já o sinal de adição (+) mostra que é uma linha 
# nova. Alterações são representadas por uma remoção e uma adição de 
# linha.
#
$ git log --oneline
$ git diff <HASH_COMMIT>..<HASH_COMMIT>
$ git diff 823fd9e..e5d38b4

#
# tags
#

$ git tag -a v0.1.0 -m "primeira versao beta da aplicação"

$ git tag

$ git push origin main

$ git push origin v0.1.0

#############################################
#
# 02.Controle avançado de conflito
#
#############################################

# trazer as alterações de um determinado commit para uma determinada 
# branch.
#
# Se uma implementação é necessária em sua branch e já foi feita em outra 
# branch, pode fazer sentido trazer um commit específico, utilizando o git 
# cherry-pick.
#
# git cherry-pick <HASH_COMMIT>

$ git checkout -b novo-release

$ vi git/src/index.html
$ git add git/src/index.html
$ git commit "alterando o arquivo index.html"

$ vi git/src/index.html
$ git add git/src/index.html
$ git commit "alterando o arquivo index.html"

$ git log --oneline

$ git checkout main

$ git cherry-pick <HASH_COMMIT>
$ git rebase novo-release

# procura de um determinado commit entre vários commits
#
# Encontrando o exato commit em que determinado bug foi introduzido, 
# podemos revertê-lo ou até mesmo tentar entender o motivo daquele bug 
# ter sido introduzido.
#
# git bisect

$ git bisect start
$ git bisect bad HEAD
$ git bisect good <HASH_COMMIT>
$ git bisect bad
$ git bisect good <HASH_COMMIT>
$ git bisect good ; confirmar que é esse commit o correto
$ git bisect reset ; enserar a busca
$ git show <HASH_COMMIT>
$ git revert <HASH_COMMIT>
$ git add git/src/index.html
$ git commit "alterando o arquivo index.html"

# procurar pelo responsável por um determinado commit
#
# Com o git blame, nós podemos saber quem é o responsável por determinada 
# linha ou bloco de código que nós não entendemos, e com isso sabemos com 
# quem tirar a dúvida!
#
# git blame <ARQUIVO>

$ git blame git/src/index.html

#############################################
#
# 03.Estratégias de branching
#
#############################################

# localizado na branch main

$ git checkout -b dev

$ git checkout -b feature/lista-cursos-cloud

$ vi git/src/index.html
$ git add git/src/index.html      
$ git commit -m "cursos de cloud - EC2 e S3" 

$ git checkout dev

$ git checkout -b feature/lista-cursos-linux

$ vi git/src/index.html
$ git add git/src/index.html     
$ git commit -m "cursos de linux - shell script I e II"

$ git checkout dev
$ git merge feature/lista-cursos-cloud
$ git merge feature/lista-cursos-linux

$ git checkout main
$ git merge dev