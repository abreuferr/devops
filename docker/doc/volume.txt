#: Title : volume
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : volume
#: Options : distribuicao utilizada - gnu/linux debian

# sistema de arquivo que esta sendo utilizado
#
$ docker system info | grep Storage

# arquivo de configuração do docker
#
$ cat /etc/docker/daemon.json

# Volume
#
$ docker volume COMMAND
    create
    inspect
    ls
    prune
    rm

# VOLUME
#
$ docker volume create [HOST_VOLUME_NAME] ; criar um volume local
$ docker volume ls ; listar os volumes
$ docker volume rm [HOST_VOLUME_NAME] ; apagar um volume
$ docker volume rm -f [HOST_VOLUME_NAME] ; forcar a remocao do volume

# ASSOCIAR VOLUME_NAME/CONTAINER_DIR_NAME
#
$ docker container run -ti --mount type=volume,src=[VOLUME_NAME],dst=/[CONTAINER_DIR_NAME] --name [CONTAINER_NAME] [IMAGE_NAME]

$ docker container run -dit -v [/DIR_ORIGEM]:[/DIR_DESTINO] --name [CONTAINER_NAME] [IMAGE_NAME]
$ docker container run -dit -v [/DIR_HOST]:[/DIR_CONTAINER] --name [CONTAINER_NAME] [IMAGE_NAME]
{
    $ docker container run -dit --name servidor -v /srv:/srv debian
    $ docker container exec servidor touch /srv/arquivo_container.txt
    $ touch /srv/arquivo_host.txt
    $ docker container exec ls -l /srv
}

# volume anonimo
#
$ docker container run --name [CONTAINER_NAME] [IMAGE_NAME] --volume [/DIR_CONTAINER]
{
    $ docker container run -dit --name servidor debian --volume /volume
    $ docker volume ls
    $ docker container inspect servidor | grep volume
    $ docker volume ls
    $ docker volume inspect [HASH]
    $ sudo touch /var/lib/docker/volumes/[HASH]]/_data/arquivo2.txt
    $ docker container exec servidor ls /volume
}

# volume nomeado
#
$ docker container run -dit -v [NOME_VOLUME]:[/DIR_CONTAINER] --name [CONTAINER_NAME] [IMAGE_NAME]
{
    $ docker container run -dit -v volume:/volume --name servidor debian
    $ docker volume ls
    $ ls -l /var/lib/docker/volumes/volume/_data
}

# ASSOCIAR HOST_DIR_NAME/DOCKER_DIR_NAME
#
$ docker container run -dti --mount source=[HOST_VOLUME_NAME],target=/[CONTAINER_DIR_NAME] --name [CONTAINER_NAME] [IMAGE_NAME] ; 
$ docker container run -dti --mount source=[HOST_VOLUME_NAME],target=/[CONTAINER_DIR_NAME],rw --name [CONTAINER_NAME] [IMAGE_NAME] ; ro
$ docker container run -dti --mount source=[HOST_VOLUME_NAME],target=/[CONTAINER_DIR_NAME],ro --name [CONTAINER_NAME] [IMAGE_NAME] ; rw

# Apagar volume
#
$ docker volume rm [NOME_VOLUME]
{
    docker volume rm volume2
}

# TMPFS - temporaries File Storage
#
# volume criado na memória RAM
$ docker container run -dit --mount type=[TIPO],destination=[/DIR_CONTAINER] --name [CONTAINER_NAME] [IMAGE_NAME]
$ docker container run -dit --tmpfs [/DIR_CONTAINER] --name [CONTAINER_NAME] [IMAGE_NAME]
{
    $ docker container run -dit --mount type=tmpfs,destination=/app --name tmpfstest1 debian
    $ docker container inspect tmpfstest1 --format '{{json .Mounts}}'| jq
    [
        {
            "Type": "tmpfs",
            "Source": "",
            "Destination": "/app",
            "Mode": "",
            "RW": true,
            "Propagation": ""
        }
    ]
    $ docker container exec tmpfstest1 df -h                                       
    Filesystem                  Size  Used Avail Use% Mounted on
    tmpfs                       494M     0  494M   0% /app

    $ docker container run -dit --tmpfs /app --name tmpfstest2 debian
    $ docker container inspect tmpfstest2 --format '{{json .HostConfig.Tmpfs}}'| jq   
    {
        "/app": ""
    }
}

# alterando o tamanho do TMPFS
#
$ docker container run -dit --mount type=tmpfs,destination=[/DIR_CONTAINER].tmpfs-size=[TAMANHO] --name [CONTAINER_NAME] [IMAGE_NAME]
{
    $ docker container run -dit --mount type=tmpfs,destination=/app.tmpfs-size=100M --name tmpfstest1 debian
    $ docker container inspect tmpfstest1 --format '{{json .HostConfig.Mounts}}'| jq
    [
        {
            "Type": "tmpfs",
            "Target": "/app.tmpfs-size=100M"
        }
    ]
}

# backup de volume
#
$ $ docker container run -dit --volumes-from [CONTAINER_ORIGEM] --name [CONTAINER_NAME] [IMAGE_NAME]
{
    $ docker container run -dit -v /webdata --name webserver debian                                         
    $ docker container run -dit --volumes-from webserver --name volumetest debian
}

#
# DOCKER PLUG-IN - SSHFS
#

# Instalação
#
$ docker plugin install vieux/sshfs

# Listar o plugin instalado
#
$ docker plugin ls

# criar volume
#
$ docker volume create [NOME_VOLUME]
{
    $ docker volume create nomeVolume
    # docker02
    $ mkdir volumeremoto
    $ toutch volumeremoto/teste_volume.txt
    # docker01
    $ docker volume create -d vieux/sshfs --name sshvolume -o sshcmd=cferreira@192.168.122.14:/home/cferreira/volumeremoto -o password=SENHA
    $ docker volume ls
    DRIVER               VOLUME NAME
    vieux/sshfs:latest   sshvolume
    $ docker volume inspect sshvolume | jq                                                                                      
    [
        {
            "CreatedAt": "0001-01-01T00:00:00Z",
            "Driver": "vieux/sshfs:latest",
            "Labels": {},
            "Mountpoint": "/mnt/volumes/a6026fe781de29df40d8715b3e503e2a",
            "Name": "sshvolume",
            "Options": {
                "password": "SENHA",
                "sshcmd": "cferreira@192.168.122.14:/volumeremoto"
            },
            "Scope": "local"
        }
    ]
    # docker01
    $ docker container run --rm -v sshvolume:/data alpine ls /data                                                                              
    teste_volume.txt
}

#
# DOCKER PLUG-IN - NFS
#

# Instalação - NFS Server
#

# docker02 (configuracao inicial)
#
$ sudo apt install nfs-server
$ sudo cat /etc/exports
    /home/cferreira/volumeremoto 192.168.122.0/24(rw)
$ sud systemctl restart nfs-server
$ showmount -e

# docker01 (configuracao inicial)
#
$ sudo apt install nfs-common -y -d
$ sudo showmount -e 192.168.122.14
$ docker plugin install trajano/nfs-volume-plugin

# docker01 (montando o volume)
#
$ docker volume create -d trajano/nfs-volume-plugin --opt device=192.168.122.14:/home/cferreira/volumeremoto --opt=nfsopts=hard,proto=tcp,nfsvers=3,intr,nolock volume_nfs
$ docker volume ls
    DRIVER                             VOLUME NAME
    vieux/sshfs:latest                 sshvolume
    trajano/nfs-volume-plugin:latest   volume_nfs

$ docker container run -dit -v volume_nfs:/usr/share/nginx/html -p 80:80 --name webserver nginx
