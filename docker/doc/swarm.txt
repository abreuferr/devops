#: Title : Docker Machine e Swarm
#: Author : "Caio Abreu Ferreira" <abreuferr_gmail.com>
#: Description : Dcoker Machine e Swarm
#: Options : distribuicao utilizada - gnu/linux debian

#
# SWARM
#

$ docker swarm init --advertise-addr [MANAGER-IP] ; inicalizar o cluster swarm
{
    $ docker swarm init --advertise-addr 192.168.122.18
    Swarm initialized: current node (ryucc6a6xd6jjofulgzagfx89) is now a manager.

    To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-3e78mevx1whtgowvhy3dz362n13z7eirof2b0j0v75x6tbrmhl-92h79cow1f1lsaqmd4pxjs35x 192.168.122.18:2377

    To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
}

$ docker swarm join --token [TOKEN] [IP]:[PORTA] ; comando utilizado para adicionar um n√≥ ao cluster swarm
{
    docker swarm join --token SWMTKN-1-3e78mevx1whtgowvhy3dz362n13z7eirof2b0j0v75x6tbrmhl-92h79cow1f1lsaqmd4pxjs35x 192.168.122.18:2377
}

$ docker swarm join-token manager ; comando utilizado para exibir o comando utilizado para adicionar manager no swarm
{
    $ docker swarm join-token manager
    To add a manager to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-3e78mevx1whtgowvhy3dz362n13z7eirof2b0j0v75x6tbrmhl-8h2hynbluag5f7x2f4zyqz3vg 192.168.122.18:2377
}

$ docker swarm join-token worker ; comando utilizado para exibir o comando utilizado para adicionar worker no swarm
{
    $ docker swarm join --token SWMTKN-1-3e78mevx1whtgowvhy3dz362n13z7eirof2b0j0v75x6tbrmhl-92h79cow1f1lsaqmd4pxjs35x 192.168.122.18:2377
}

$ docker swarm leave ; comando utilizado para remover o node do cluster swarm

#
# NODE
#

$ docker node ls ; listar o nodes do cluster
{
    $ docker node ls                                   
    ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
    ryucc6a6xd6jjofulgzagfx89 *   manager    Ready     Active         Leader           20.10.8
    kf9bnxkdex03mns3qeocjcvhs     node01     Ready     Active                          20.10.8
    lapr60zg96mqk0u9sxqieqvh0     node02     Ready     Active                          20.10.8
}
$ docker node ps ; listar as tarefas que estao sendo executadas nos nodes
$ docker node rm [NODE-NAME]; remover o host do cluster 
$ docker node inspect [NODE-NAME] ; obter informacao sobre um determinado node do cluster swarm
$ docker node update [NODE-NAME] ; atualizar as configuracoes do node
$ docker node --role worker [NODE-NAME] ; torna o node um worker
$ docker node --role manager [NODE-NAME] ; torna o node um manager
$ docker node update --availability drain [NODE-NAME] ; desativar determinado node do cluster swarm
$ docker node update --availability active [NODE-NAME] ; ativar determinado node do cluster swarm
$ docker node update --availability pause [NODE-NAME] ; pausar determinado node do cluster swarm

$ docker node promote [NODE_NAME] ; promover o host de worker para manager
{
    $ docker node promote node01    
    Node node01 promoted to a manager in the swarm.
    $ docker node ls            
    ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
    ryucc6a6xd6jjofulgzagfx89 *   manager    Ready     Active         Leader           20.10.8
    kf9bnxkdex03mns3qeocjcvhs     node01     Ready     Active         Reachable        20.10.8
}

$ docker node demote [NODE_NAME] ; rebaixar o host de manager para worker
{
    $ docker node demote node01
    Manager node01 demoted in the swarm.
    $ docker node ls           
    ID                            HOSTNAME   STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
    ryucc6a6xd6jjofulgzagfx89 *   manager    Ready     Active         Leader           20.10.8
    kf9bnxkdex03mns3qeocjcvhs     node01     Ready     Active                          20.10.8
}

#
# SERVICO
#

$ docker service create [OPCAO]--replicas [REPLICA-NUMBER] --name [SERVICE-NAME] [IMAGE-NAME]:[VERSION] ; criacao de um servico
$ docker service ls ; listar os servicos que estao ativos
$ docker service ps [SERVICE-NAME] ; obter informacao sobre o servico
$ docker service scale [SERVICE-NAME]=[REPLICA-NUMBER] ; replicar o servico para N nodes do cluster swarm
$ docker service rm [SERVICE-NAME] ; apagar um determinado servico

# SERVICO [REPLICATED] + VOLUME
#
$ docker volume create [VOLUME-NAME] ; criacao de um volume
$ docker service create --name [SERVICE-NAME] --replicas [QTDADE-REPLICA] -p 8080:80 --mount type=volume,src=[VOLUME-NAME],dst=/[DIR-VOLUNE-NAME] [IMAGE-NAME]:[VERSION] ; criacao de um servico com um determinado servico
$ docker service update --mount-add type=volume,src=[VOLUME-NAME],dst=[CONTAINER-DIR] [SERVICE-NAME] ; adicionar um volume a um servico

# SERVICO + REDE
#
$ docker network create --driver overlay [NETWORK-NAME] ; criacao de uma rede do tipo overlay
$ docker service create --name [SERVICE-NAME] --network [NETWORK-NAME] --replicas [QTDADE-REPLICA] [IMAGE-NAME]:[VERSION] ; criar e adicionar um servico em uma determinada rede
$ docker service create --name [SERVICE-NAME] --network [NETWORK-NAME] -p 8080:80 --mode global [IMAGE-NAME]:[VERSION] ; servico do tipo globa implica que esse servico sera replicato para todos os nodes do cluster
$ docker service create --name [SERVICE-NAME] --network-rm [NETWORK-NAME] --network-add [NETWORK-NAME] --replicas [QTDADE-REPLICA] [IMAGE-NAME]:[VERSION] ; criar e adicionar um servico em uma determinada rede e remover de outra rede

# SERICE + IMAGEM
#
$ docker service update --image [IMAGE-NAME]:[VERSAO] [SERVICE-NAME] ; upgrade/downgrade de uma imagem em um servico

# SERVICO + REDE + VOLUME
#
$ docker network create --driver overlay [NETWORK-NAME] ; criacao de uma rede do tipo overlay
$ docker volume create [VOLUME-NAME]
$ docker service create --name [SERICE-NAME] --network [NETWORK-NAME] --mount type=volume,src=[VOLUME-NAME],dst=/[CONTAINER-DIR] -p 8080:80 --replicas [QTDATE-REPLICA] --mode replicated --hostname [HOST-NAME] --dns [DNS] --limit-memory [QTDADE-MEMORY]M --limit-cpu 0.5 --restart-condition any [IMAGE-NAME]:[VERSION]